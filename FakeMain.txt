package br.com.adaptadores.service;

import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import br.com.adaptadores.model.ParametrizacaoModel;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class FakeMain {

	public static void main(String[] args) throws IOException {
//		XSSFSheet planilha = new CapturaArquivo().comNome("parametrizacao.xlsx").comAbaDeNumero(0)
//				.capturaExcelPorNumeroDeAba();

//		Map<Integer, List<String>> data = new HashMap<>();
//		int i = 0;
//		for (Row row : planilha) {
//			data.put(i, new ArrayList<String>());
//			for (Cell cell : row) {
//				switch (cell.getCellTypeEnum()) {
//				case STRING:
//					break;
//				case NUMERIC:
//					break;
//				case BOOLEAN:
//					break;
//				case FORMULA:
//					break;
//				default:
//					data.get(new Integer(i)).add(" ");
//				}
//			}
//			i++;
//		}
//
//		Map<Integer, List<String>> data = new HashMap<>();
//
//		Workbook workbook = Workbook.getWorkbook(new File("parametrizacao.xls"));
//		Sheet sheet = workbook.getSheet(0);
//		int rows = sheet.getRows();
//		int columns = sheet.getColumns();
//
//		for (int i = 0; i < rows; i++) {
//			data.put(i, new ArrayList<String>());
//			for (int j = 0; j < columns; j++) {
//				data.get(i).add(sheet.getCell(j, i).getContents());
//			}
//		}
//
//		int i = 1;

//        try {
//
//            FileInputStream excelFile = new FileInputStream(new File("parametrizacao.xlsx"));
//            Workbook workbook = new XSSFWorkbook(excelFile);
//            Sheet datatypeSheet = workbook.getSheetAt(0);
//            Iterator<Row> iterator = datatypeSheet.iterator();
//
//            while (iterator.hasNext()) {
//
//                Row currentRow = iterator.next();
//                Iterator<Cell> cellIterator = currentRow.iterator();
//
//                while (cellIterator.hasNext()) {
//
//                    Cell currentCell = cellIterator.next();
//                    //getCellTypeEnum shown as deprecated for version 3.15
//                    //getCellTypeEnum ill be renamed to getCellType starting from version 4.0
//                    if (currentCell.getCellTypeEnum() == CellType.STRING) {
//                        System.out.print(currentCell.getStringCellValue() + "--");
//                    } else if (currentCell.getCellTypeEnum() == CellType.NUMERIC) {
//                        System.out.print(currentCell.getNumericCellValue() + "--");
//                    }
//
//                }
//                System.out.println();
//
//            }
//        } catch (FileNotFoundException e) {
//            e.printStackTrace();
//        } catch (IOException e) {
//            e.printStackTrace();
//        }

		List<ParametrizacaoModel> parametrizacoes = new ArrayList<ParametrizacaoModel>();
		FileInputStream file = new FileInputStream(new File("parametrizacao.xlsx"));
		Workbook workbook = new XSSFWorkbook(file);
		Sheet sheet = workbook.getSheetAt(0);
		int i = 0;
		Map<Integer, List<String>> data = new HashMap<>();
		int noOfColumns = sheet.getRow(0).getPhysicalNumberOfCells();
		int noOfColumns2 = sheet.getRow(0).getLastCellNum();

//		Stream<Row> streamDeLinhasPlanilha = sheet.stream().filter(c -> c.getAlunos() > 100);
		for (Row row : sheet) {
			
			 if(row.getRowNum()==0 ){
				   continue; 
				  }
			 
//			 String.valueOf(row.getCell(3).getNumericCellValue()) 

			ParametrizacaoModel parametrizacao =	 new ParametrizacaoModel( row.getCell(0).getRichStringCellValue().getString(),  row.getCell(1).getRichStringCellValue().getString(),  row.getCell(2).getRichStringCellValue().getString(),
					 row.getCell(4).getRichStringCellValue().getString(),  null,  row.getCell(6).getRichStringCellValue().getString(),
					 row.getCell(5).getRichStringCellValue().getString(), String.valueOf((int) row.getCell(3).getNumericCellValue()) ,  null,  row.getCell(7).getRichStringCellValue().getString()) ;
		
			parametrizacoes.add(parametrizacao);

//			data.put(i, new ArrayList<String>());
//			for (Cell cell : row) {
//				switch (cell.getCellTypeEnum()) {
//				case STRING:
//					data.get(i).add(cell.getRichStringCellValue().getString());
//					break;
//				case NUMERIC:
//					if (DateUtil.isCellDateFormatted(cell)) {
//						data.get(i).add(cell.getDateCellValue() + "");
//					} else {
//						data.get(i).add((int) cell.getNumericCellValue() + "");
//					}
//					break;
//				case BOOLEAN:
//					data.get(i).add(cell.getBooleanCellValue() + "");
//					break;
//				case FORMULA:
//					data.get(i).add(cell.getCellFormula() + "");
//					break;
//				default:
//					data.get(i).add(" ");
//				}
//			}
			i++;

		}
		if (workbook != null) {
			workbook.close();
		
			
			
		}
	}

}
